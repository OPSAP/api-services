service: logbook-service
app: opsap
org: opsap

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline # Enables local devleopment
  - serverless-prune-plugin # Prune old functions
  - serverless-domain-manager

useDotenv: true
configValidationMode: error
package: # Packages functions individually
  individually: true

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  lambdaHashingVersion: 20201221
  environment:
    LOGBOOK_SERVICE_TABLE: ${self:custom.logbook-service-table.name}
    MAIL_QUEUE_URL: ${self:custom.mail-queue.url}
    LOGBOOK_BUCKET_NAME: ${self:custom.logbook-bucket.name}
  iam:
    role:
      statements:
        - ${file(infra/iam/logbook-service-table-iam.yml):logbook-service-table-iam}
        - ${file(infra/iam/mail-queue-iam.yml):mail-queue-iam}
        - ${file(infra/iam/logbook-bucket-iam.yml):logbook-bucket-iam}

resources:
  Resources:
    LogbookServiceTable: ${file(infra/resources/logbook-service-table.yml):logbook-service-table}
    LogbookBucket: ${file(infra/resources/logbook-bucket.yml):logbook-bucket}
    LogbookBucketPolicy: ${file(infra/resources/logbook-bucket.yml):logbook-bucket-policy}
    EventsStreamCreateEntry: ${file(infra/resources/events-stream-create-entry.yml):events-stream-create-entry}

functions:
  diving-diver-create-entry:
    handler: functions/diving/diver/create-entry.handler
    name: ${self:service}-${self:provider.stage}-diving-diver-create-entry
    description: 'create diver logbook entry'
    events:
      - http:
          method: POST
          path: diving/diver/create-entry
          authorizer: ${self:custom.authorizer}
          cors: true
    environment:
      EVENTS_STREAM_CREATE_ENTRY: ${self:custom.kinesis-stream.name}

  diving-diver-get-entries:
    handler: functions/diving/diver/get-entries.handler
    name: ${self:service}-${self:provider.stage}-diving-diver-get-entries
    description: 'get all diver logbook entries'
    events:
      - http:
          method: GET
          path: diving/diver/get-entries/{userId}
          cors: true

  diving-diver-get-entry:
    handler: functions/diving/diver/get-entry.handler
    name: ${self:service}-${self:provider.stage}-diving-diver-get-entry
    description: 'get diver logbook entry'
    events:
      - http:
          method: GET
          path: /diving/diver/get-entry/{userId}/{entryId}
          cors: true

  diving-diver-update-entry:
    handler: functions/diving/diver/update-entry.handler
    name: ${self:service}-${self:provider.stage}-diving-diver-update-entry
    description: 'update diver logbook entry'
    events:
      - http:
          method: PATCH
          path: diving/diver/update-entry/{userId}
          authorizer: ${self:custom.authorizer}
          cors: true

  diving-diver-delete-entry:
    handler: functions/diving/diver/delete-entry.handler
    name: ${self:service}-${self:provider.stage}-diving-diver-delete-entry
    description: 'delete diver logbook entry'
    events:
      - http:
          method: DELETE
          path: diving/diver/delete-entry/{userId}/{entryId}
          authorizer: ${self:custom.authorizer}
          cors: true

  diving-diver-upload-picture:
    handler: functions/diving/diver/upload-picture.handler
    name: ${self:service}-${self:provider.stage}-diving-diver-upload-picture
    description: 'upload diver logbook entry picture to s3'
    events:
      - http:
          method: PATCH
          path: diving/diver/upload-picture/{userId}/{entryId}
          # authorizer: ${self:custom.authorizer}
          cors: true

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: api.opsap.com
    staging: staging-api.opsap.com
    dev: dev-api.opsap.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: logbook
    stage: ${self:provider.stage}
    createRoute53Record: true
  prune:
    automatic: true
    includeLayers: true
    number: 3
  logbook-service-table:
    name: !Ref LogbookServiceTable
    arn: !GetAtt LogbookServiceTable.Arn
  mail-queue:
    arn: ${cf:notification-service-${self:provider.stage}.NotificationMailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.NotificationMailQueueUrl}
  kinesis-stream:
    name: !Ref EventsStreamCreateEntry
    arn: !GetAtt EventsStreamCreateEntry.Arn
  logbook-bucket:
    name: bucket-opsap-${self:service}-${self:provider.stage}
  bundle:
    packager: yarn
    linting: true
    sourcemaps: true # Enable source maps
    caching: true # Enable Webpack caching
    stats: false # includes Webpack's stats
    forceExclude: # Don't include these in the package
      - chrome-aws-lambda # Because it'll be provided through a Lambda Layer
    ignorePackages:
      - hiredis
  authorizer: arn:aws:lambda:${aws:region}:${aws:accountId}:function:auth-service-${self:provider.stage}-my-auth-guard-func
