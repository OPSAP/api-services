service: logbook-service
app: opsap
org: opsap

plugins:
  - serverless-esbuild # Package our functions with Webpack
  - serverless-offline # Enables local devleopment
  - serverless-prune-plugin # Prune old functions
  - serverless-dotenv-plugin # Load .env as environment variable
  - serverless-domain-manager

useDotenv: true
configValidationMode: error
package: # Packages functions individually
  individually: true

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: api.opsap.com
    staging: staging-api.opsap.com
    dev: dev-api.opsap.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: 'logbook'
    stage: ${self:provider.stage}
    createRoute53Record: true
  prune:
    automatic: true
    includeLayers: true
    number: 3
  logbook-service-table:
    name: !Ref LogbookServiceTable
    arn: !GetAtt LogbookServiceTable.Arn
  bundle:
    linting: true
  authorizer: arn:aws:lambda:${aws:region}:${aws:accountId}:function:auth-service-${self:provider.stage}-my-auth-guard-func

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  lambdaHashingVersion: 20201221
  environment:
    LOGBOOK_SERVICE_TABLE: ${self:custom.logbook-service-table.name}
  iam:
    role:
      statements: ${file(infra/provider-iam.yml):provider-iam}

resources:
  Resources:
    LogbookServiceTable: ${file(infra/logbook-service-table.yml):logbook-service-table}

###### Lambda functions & API endpoints ######
functions:
  ########## Diving - Diver #########
  diving-diver-create-entry:
    handler: functions/diving/diver/create-entry.handler
    name: ${self:service}-${self:provider.stage}-diving-diver-create-entry
    description: 'create diver logbook entry'
    events:
      - http:
          method: POST
          path: diving/diver/create-entry
          cors: true

  diving-diver-get-entries:
    handler: functions/diving/diver/get-entries.handler
    name: ${self:service}-${self:provider.stage}-diving-diver-get-entries
    description: 'get all diver logbook entries'
    events:
      - http:
          method: GET
          path: diving/diver/get-entries/{userId}
          cors: true

  diving-diver-get-entry:
    handler: functions/diving/diver/get-entry.handler
    name: ${self:service}-${self:provider.stage}-diving-diver-get-entry
    description: 'get diver logbook entry'
    events:
      - http:
          method: GET
          path: /diving/diver/get-entry/{userId}/{entryId}
          cors: true

  diving-diver-update-entry:
    handler: functions/diving/diver/update-entry.handler
    name: ${self:service}-${self:provider.stage}-diving-diver-update-entries
    description: 'update diver logbook entry'
    events:
      - http:
          method: PATCH
          path: diving/diver/update-entry/{userId}
          cors: true

  diving-diver-delete-entry:
    handler: functions/diving/diver/delete-entry.handler
    name: ${self:service}-${self:provider.stage}-diving-diver-delete-entry
    description: 'delete diver logbook entry'
    events:
      - http:
          method: DELETE
          path: diving/diver/delete-entry/{userId}/{entryId}
          authorizer: ${self:custom.authorizer}
          cors: true
