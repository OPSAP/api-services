service: auth-service

plugins:
  - serverless-build
  - serverless-domain-manage

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  lambdaHashingVersion: 20201221
  memorySize: 128
  environment:
    AUTH0_PUBLIC_KEY: ${file(secret.pem)}

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: api.opsap.com
    staging: staging-api.opsap.com
    dev: dev-api.opsap.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: auth
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: edge
  bundle:
    linting: true

functions:
  auth:
    handler: functions/auth.handler
    cors: true
  public-endpoing:
    handler: functions/public.handler
    events:
      - http:
          path: public
          method: POST
          cors: true
  private-endpoint:
    handler: functions/private.handler
    events:
      - http:
          path: private
          method: POST
          authorizer: auth
          cors: true

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
