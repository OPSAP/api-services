service: logbook-service
app: opsap
org: opsap

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline # Enables local devleopment
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-plugin-warmup # Keeps function warmed up, no cold starts

configValidationMode: error
useDotenv: true

package: # Packages functions individually
  individually: true

custom:
  diving-diver-table:
    name: !Ref DivingDiverTable
    arn: !GetAtt DivingDiverTable.Arn
  bundle:
    linting: true
  warmup:
    default:
      enabled:
        - prod
      memorySize: 128
      name: ${self:provider.stage}-${self:service}-warmer-default
      concurrency: 10
      tracing: true
      prewarm: true
      events:
        - schedule: cron(0/5 23 ? * MON-SUN *)
      package:
        individually: true
      tags:
        Project: opsap
        Owner: Sean Knowles

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  lambdaHashingVersion: 20201221
  environment:
    DIVING_DIVER_TABLE: ${self:custom.diving-diver-table.name}
  iam:
    role:
      statements: ${file(infra/iam-policies/provider-iam.yml):provider-iam}

resources:
  Resources:
    DivingDiverTable: ${file(infra/diving/diving-diver-table.yml):diving-diver-table}

############ Lambda functions & API endpoints ############
functions:
  ########## Diving - Diver #########
  diving-diver-entry-create:
    handler: functions/diving/diver/create-entry.handler
    name: ${self:provider.stage}-${self:service}-diving-diver-entry-create
    description: "create diver logbook entry"
    events:
      - http:
          method: POST
          path: diving/diver/entry/create
          cors: true
    warmup:
      default:
        enabled: true

  diving-diver-entries-get:
    handler: functions/diving/diver/get-entries.handler
    name: ${self:provider.stage}-${self:service}-diving-diver-entries-get
    description: "get all diver logbook entries"
    events:
      - http:
          method: GET
          path: diving/diver/entries/get/{userId}
          cors: true
    warmup:
      default:
        enabled: true

  diving-diver-entry-get:
    handler: functions/diving/diver/get-entry.handler
    name: ${self:provider.stage}-${self:service}-diving-diver-entry-get
    description: "get diver logbook entry"
    events:
      - http:
          method: GET
          path: /diving/diver/entry/get/{userId}/{entryId}
          cors: true
    warmup:
      default:
        enabled: true

  diving-diver-entry-update:
    handler: functions/diving/diver/update-entry.handler
    name: ${self:provider.stage}-${self:service}-diving-diver-entry-update
    description: "update diver logbook entry"
    events:
      - http:
          method: PATCH
          path: diving/diver/entry/update/{id}
          cors: true
    warmup:
      default:
        enabled: true

  diving-diver-entry-delete:
    handler: functions/diving/diver/delete-entry.handler
    name: ${self:provider.stage}-${self:service}-diving-diver-entry-delete
    description: "delete diver logbook entry"
    events:
      - http:
          method: DELETE
          path: diving/diver/entry/delete/{id}
          cors: true
    warmup:
      default:
        enabled: true
